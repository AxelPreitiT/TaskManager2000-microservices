spec:
  inputs:
    service:
      type: string
---
# Imagen de base para todos los jobs
image: node:23.1.0

include:
  - template: Jobs/SAST.gitlab-ci.yml

# Variables globales de entorno
variables:
  SEARCH_MAX_DEPTH: 17 # No tengo idea de qué es esto
  GITLAB_ADVANCED_SAST_ENABLED: "true"
  MICROSERVICE_ORQUESTADOR: "orquestador"
  MICROSERVICE_SCHEDULER: "scheduler"
  MICROSERVICE_TASK_SERVICE: "task_service"
  MICROSERVICE_WORKFLOW_MANAGER: "wf_manager"
  MICROSERVICES: "${MICROSERVICE_ORQUESTADOR} ${MICROSERVICE_SCHEDULER} ${MICROSERVICE_TASK_SERVICE} ${MICROSERVICE_WORKFLOW_MANAGER}"
  CACHE_KEY: "cache-$(for service in ${MICROSERVICES}; do cat $service/package-lock.json; done | sha256sum | awk '{ print $1 }')"
  # Agregamos los jobs acá???

stages:
  # - prepare
  - test

# cache-job:
#   stage: prepare
#   cache:
#     key: ${CACHE_KEY}
#     paths:
#       - ./*/.npm/
#       - ./*/node_modules/
#       - ./*/package-lock.json.sha256sum
#     policy: pull-push
#     when: on_failure
#   script:
#     - CI_CACHE_EXIT_CODE=0
#     - for service in ${MICROSERVICES}; do
#       hash=$(cat $service/package-lock.json | sha256sum | awk '{ print $1 }');
#       if [ ! -f $service/package-lock.json.sha256sum ] || [ "$(cat $service/package-lock.json.sha256sum)" != "$hash" ]; then
#       echo "Cache miss for $service";
#       CI_CACHE_EXIT_CODE=123;
#       fi;
#       echo $hash > $service/package-lock.json.sha256sum;
#       done
#     - if [ $CI_CACHE_EXIT_CODE -ne 0 ]; then
#       for service in ${MICROSERVICES}; do
#       cd $service;
#       echo "Installing dependencies for $service";
#       npm ci --cache .npm --prefer-offline;
#       cd ..;
#       done;
#       fi
#     - exit $CI_CACHE_EXIT_CODE
#   allow_failure:
#     exit_codes: 123

.node-job:
  cache:
    key: ${CACHE_KEY}
    paths:
      - $[[ inputs.service ]]/.npm/
      - $[[ inputs.service ]]/node_modules/
    policy: pull

unit-test:
  extends: .node-job
  stage: test
  script:
    - cd shared
    - npm install
    - cd ../$[[ inputs.service ]]
    - npm install
    - JEST_JUNIT_OUTPUT_FILE='test-results.xml' npm run test -- --ci --reporters=default --reporters=jest-junit
  artifacts:
    reports:
      junit: $[[ inputs.service ]]/test-results.xml
  rules:
    - if: $CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+$/ # Ensure it doesn't run on version tags
      when: never
    - when: on_success
